@startuml
!includeurl https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Component Diagram for AMAI Platform Backend Service

Container(apiService, "AMAI API Service", "Spring Boot", "Handles business logic, event management, speaker coordination, data processing, and agenda settings.")

Container_Boundary(api, "AMAI Backend Service") {
    Component(userController, "User Controller", "Spring MVC Rest Controller", "RESTful API endpoints for user operations.")
    Component(eventController, "Event Controller", "Spring MVC Rest Controller", "RESTful API endpoints for event operations.")
    Component(speakerController, "Speaker Controller", "Spring MVC Rest Controller", "RESTful API endpoints for speaker operations.")
    Component(presentationController, "Presentation Controller", "Spring MVC Rest Controller", "RESTful API endpoints for presentation operations.")
    Component(agendaController, "Agenda Controller", "Spring MVC Rest Controller", "RESTful API endpoints for agenda management.")

    Component(userService, "User Service", "Spring Service", "Manages user information and actions.")
    Component(eventService, "Event Service", "Spring Service", "Handles event-related functionality.")
    Component(speakerService, "Speaker Service", "Spring Service", "Manages speaker information and engagements.")
    Component(presentationService, "Presentation Service", "Spring Service", "Handles presentation scheduling and details.")
    Component(agendaService, "Agenda Service", "Spring Service", "Manages and schedules event agendas.")

    ComponentDb(userRepository, "User Repository", "JPA Repository", "Provides CRUD functionality for user data.")
    ComponentDb(eventRepository, "Event Repository", "JPA Repository", "Provides CRUD functionality for event data.")
    ComponentDb(speakerRepository, "Speaker Repository", "JPA Repository", "Provides CRUD functionality for speaker data.")
    ComponentDb(presentationRepository, "Presentation Repository", "JPA Repository", "Provides CRUD functionality for presentation data.")
    ComponentDb(agendaRepository, "Agenda Repository", "JPA Repository", "Provides CRUD functionality for agenda data.")

    Rel(userController, userService, "Uses")
    Rel(eventController, eventService, "Uses")
    Rel(speakerController, speakerService, "Uses")
    Rel(presentationController, presentationService, "Uses")
    Rel(agendaController, agendaService, "Uses")

    Rel(userService, userRepository, "Reads from and writes to")
    Rel(eventService, eventRepository, "Reads from and writes to")
    Rel(speakerService, speakerRepository, "Reads from and writes to")
    Rel(presentationService, presentationRepository, "Reads from and writes to")
    Rel(agendaService, agendaRepository, "Reads from and writes to")
}

ContainerDb(database, "Database", "MySQL", "Stores all the platform's data including user, event, speaker, presentation, and agenda data.")

Rel(webApp, userController, "Makes API calls to")
Rel(webApp, eventController, "Makes API calls to")
Rel(webApp, speakerController, "Makes API calls to")
Rel(webApp, presentationController, "Makes API calls to")
Rel(webApp, agendaController, "Makes API calls to")

Rel(userRepository, database, "Reads from and writes to")
Rel(eventRepository, database, "Reads from and writes to")
Rel(speakerRepository, database, "Reads from and writes to")
Rel(presentationRepository, database, "Reads from and writes to")
Rel(agendaRepository, database, "Reads from and writes to")

@enduml
